/*
 * The MIT License
 *
 * Copyright (c) 2014 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.github.olivergondza.dumpling.factory;

import static com.github.olivergondza.dumpling.Util.pause;
import static com.github.olivergondza.dumpling.model.ProcessThread.nameIs;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

import java.io.IOException;
import java.lang.management.ManagementFactory;

import org.junit.Test;

import com.github.olivergondza.dumpling.model.ProcessRuntime;
import com.github.olivergondza.dumpling.model.ProcessThread;
import com.github.olivergondza.dumpling.model.StackTrace;
import com.github.olivergondza.dumpling.model.ThreadStatus;

/**
 * Make sure threaddump generated by vendor of current JVM can be read.
 *
 * @author ogondza
 */
public class ThreadDumpFactoryVendorTest {

    @Test
    public void generateAndParse() {
        setupFixture();
        ProcessRuntime runtime = capture();
        assertState(runtime);
    }

    private void setupFixture() {
        new BusyWaiting("busy_waiting").start();

        new Thread("waiting") {
            @Override
            public synchronized void run() {
                try {
                    wait();
                } catch (InterruptedException ex) {
                    // NOOP
                }
            };
        }.start();

        new Thread("sleeping") {
            @Override
            public void run() {
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException ex) {
                    // Ignore
                }
            }
        }.start();

        pause(100);
    }

    private static final class BusyWaiting extends Thread {
        boolean state = false;

        private BusyWaiting(String name) {
            super(name);
        }

        @Override
        public synchronized void run() {
            for (;;) {
                state = !state;
            }
        }
    }

// TODO https://github.com/olivergondza/dumpling/issues/32
//  @Test
//  public void waitingToReacquireMonitorAfterWait() {
//      final Object lock = new Object();
//      Thread thread = new Thread("waitingToReacquireMonitorAfterWait") {
//          @Override
//          public void run() {
//              synchronized (lock) {
//                  try {
//                      lock.wait();
//                  } catch (InterruptedException ex) {
//                      // Noop
//                  }
//              }
//          }
//      };
//      thread.start();
//      pause(500);
//
//      synchronized (lock) {
//
//          lock.notify(); // Unblock the thread
//
//          pause(100000);
//      }
//  }

//  @Test
//  public void waitingToReacquireMonitorAfterWait() {
//      final Object lock = new Object();
//      final Object lock2 = new Object();
//      final Object lock3 = new Object();
//      Thread thread = new Thread("waitingToReacquireMonitorAfterWait") {
//          @Override
//          public void run() {
//              synchronized (lock) { synchronized (lock2) { synchronized (lock3) { synchronized (lock2) { synchronized (lock) {
//                  try {
//                      lock3.wait();
//                  } catch (InterruptedException ex) {
//                      // Noop
//                  }
//              }}}}}
//          }
//      };
//      thread.start();
//      pause(500000);
//
//      synchronized (lock) {
//
//          lock.notify(); // Unblock the thread
//
//          pause(100000);
//      }
//  }

    private void assertState(ProcessRuntime runtime) {
        assertBusyWaiting(runtime);
        assertWaiting(runtime);
        assertSleeping(runtime);
    }

    private void assertSleeping(ProcessRuntime runtime) {
        ProcessThread sleeping = thread(runtime, "sleeping");
        assertThat(sleeping.getStatus(), equalTo(ThreadStatus.SLEEPING));
        StackTraceElement traceElement = sleeping.getStackTrace().getElement(0);
        assertThat(
                traceElement,
                equalTo(StackTrace.nativeElement("java.lang.Thread", "sleep"))
        );
    }

    private void assertWaiting(ProcessRuntime runtime) {
        ProcessThread waiting = thread(runtime, "waiting");
        assertThat(waiting.getStatus(), equalTo(ThreadStatus.IN_OBJECT_WAIT));
    }

    private void assertBusyWaiting(ProcessRuntime runtime) {
        ProcessThread busyWaiting = thread(runtime, "busy_waiting");
        assertThat(busyWaiting.getStatus(), equalTo(ThreadStatus.RUNNABLE));
        assertThat(
                busyWaiting.getAcquiredLocks().iterator().next().getClassName(),
                equalTo("com.github.olivergondza.dumpling.factory.ThreadDumpFactoryVendorTest$BusyWaiting")
        );
        StackTraceElement traceElement = busyWaiting.getStackTrace().getElement(0);
        assertThat(
                traceElement.getClassName(),
                equalTo("com.github.olivergondza.dumpling.factory.ThreadDumpFactoryVendorTest$BusyWaiting")
        );
        assertThat(traceElement.getMethodName(), equalTo("run"));
        assertThat(traceElement.getFileName(), equalTo("ThreadDumpFactoryVendorTest.java"));
    }

    private ProcessThread thread(ProcessRuntime runtime, String name) {
        return runtime.getThreads().where(nameIs(name)).onlyThread();
    }

    private ProcessRuntime capture() {
        int pid = Integer.parseInt(ManagementFactory.getRuntimeMXBean().getName().replaceAll("@.*$", ""));

        try {
            Process jstack = new ProcessBuilder("jstack", "-l", String.valueOf(pid)).start();
            return new ThreadDumpFactory().fromStream(jstack.getInputStream());
        } catch (IOException ex) {
            throw new AssertionError(ex);
        }
    }
}
